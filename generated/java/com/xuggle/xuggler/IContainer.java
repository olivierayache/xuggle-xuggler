/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
/**
 * A file (or network data source) that contains one or more {IStream}<br>
 * objects of<br>
 * audio and video data.<br>
 * <p><br>
 * Typical usage for reading looks like this:<br>
 * <pre><br>
 * IContainer container = IContainer.make();<br>
 * <br>
 * if (container.open("myfile.flv", IContainer.Type.READ, null) &lt;0)<br>
 * &nbsp;&nbsp;throw new RuntimeException("failed to open");<br>
 * <br>
 * int numStreams = container.getNumStreams();<br>
 * for(i = 0; i &lt; numStreams; i++) {<br>
 * &nbsp;&nbsp;IStream stream = container.getStream(i);<br>
 * &nbsp;&nbsp;...query IStream for stream information...<br>
 * }<br>
 * <br>
 * IPacket packet = IPacket.make();<br>
 * while(container.readNextPacket(packet) &gt;= 0)<br>
 * {<br>
 *   &nbsp;&nbsp;... Do something with the packet...<br>
 * }<br>
 * container.close();<br>
 * </pre><br>
 * <p><br>
 * Typical usage for writing looks like this (makes an FLV file<br>
 * with one audio track encoded as mp3 data):<br>
 * </p><br>
 * <pre><br>
 * IContainer container = IContainer.make();<br>
 * <br>
 * if (container.open("myfile.flv", IContainer.Type.WRITE, null) &lt;0)<br>
 * &nbsp;&nbsp;throw new RuntimeException("failed to open");<br>
 * <br>
 * IStream stream = container.addNewStream(0);<br>
 * <br>
 * IStreamCoder coder = stream.getStreamCoder();<br>
 * <br>
 * coder.setCodec(ICodec.ID.AV_CODEC_ID_MP3);<br>
 * coder.setSampleRate(22050);<br>
 * coder.setChannels(2);<br>
 * coder.setBitRate(64000);<br>
 * <br>
 * if (coder.open()&lt;0) throw new RuntimeException("could not open coder");<br>
 * <br>
 * if (container.writeHeader() &lt; 0) throw new RuntimeException();<br>
 * <br>
 * IPacket packet = IPacket.make();<br>
 * <br>
 * while( ... have more data to process ... ) {<br>
 * &nbsp;&nbsp;... Use the coder to encode audio data into packets<br>
 * &nbsp;&nbsp;then assuming it generated an IPacket for you...<br>
 * &nbsp;&nbsp;if (container.writePacket(packet)&lt;0)<br>
 * &nbsp;&nbsp;&nbsp;&nbsp;throw new RuntimeException("could not write packet");<br>
 * }<br>
 * <br>
 * if (container.writeTrailer() &lt;0) throw new RuntimeException();<br>
 * <br>
 * container.close();<br>
 * </pre> 
 */
public class IContainer extends RefCounted implements com.xuggle.xuggler.IConfigurable {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected IContainer(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.IContainer_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected IContainer(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(XugglerJNI.IContainer_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IContainer obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IContainer object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public IContainer copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new IContainer(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IContainer)
      equal = (((IContainer)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  

  /**
   * info about this container.  We only print information that can be
   * determined without reading data from the container.
   * @return a string representation of this object
   */
   
  @Override
  public String toString()
  {
    StringBuilder result = new StringBuilder();
    
    result.append(this.getClass().getName()+"@"+hashCode()+"[");
    result.append("url:"+getURL()+";");
    result.append("type:"+getType()+";");
    result.append("format:"+getContainerFormat()+";");
    result.append("]");
    return result.toString();
  }

  /**
   * Open this container and make it ready for reading or writing.
   * Reading or writing ability is determined by
   * what the {@link com.xuggle.xuggler.io.IURLProtocolHandler}
   * passed in supports.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    com.xuggle.xuggler.io.IURLProtocolHandler handler,
    IContainer.Type type, IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(handler), type, format); 
  }

  /**
   * Open this container and make it ready for writing.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.io.OutputStream output,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(output),
     IContainer.Type.WRITE, format); 
  }

  /**
   * Open this container and make it ready for reading.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.io.InputStream input,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(input),
     IContainer.Type.READ, format); 
  }

  /**
   * Open this container and make it ready for writing.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.io.DataOutput output,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(output),
     IContainer.Type.WRITE, format); 
  }

  /**
   * Open this container and make it ready for writing.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.io.DataOutputStream output,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(
        (java.io.OutputStream)output),
     IContainer.Type.WRITE, format); 
  }

  /**
   * Open this container and make it ready for reading.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.io.DataInput input,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(input),
     IContainer.Type.READ, format); 
  }

  /**
   * Open this container and make it ready for reading.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.io.DataInputStream input,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(
        (java.io.InputStream)input),
     IContainer.Type.READ, format); 
  }

  /**
   * Open this container and make it ready for reading or writing.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.io.RandomAccessFile file,
    IContainer.Type type,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(file),
     type, format); 
  }

  /**
   * Open this container and make it ready for writing.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.nio.channels.WritableByteChannel output,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(output),
     IContainer.Type.WRITE, format); 
  }

  /**
   * Open this container and make it ready for reading.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.nio.channels.ReadableByteChannel input,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(input),
     IContainer.Type.READ, format); 
  }

  /**
   * Open this container and make it ready for reading or writing.
   * @see #open(String, IContainer.Type, IContainerFormat)
   */  
  public int open(
    java.nio.channels.ByteChannel channel,
    IContainer.Type type,
    IContainerFormat format)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(channel),
     type, format); 
  }


/**
 * Open this container and make it ready for reading or writing, optionally 
 * reading as far into the container as necessary to find all streams.
 * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
 */
  public int open(com.xuggle.xuggler.io.IURLProtocolHandler handler,
    IContainer.Type type, IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(handler), type, format,
      streamsCanBeAddedDynamically,
      queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for writing.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.io.OutputStream output,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(output),
     IContainer.Type.WRITE, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for reading.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.io.InputStream input,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(input),
     IContainer.Type.READ, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for writing.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.io.DataOutput output,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(output),
     IContainer.Type.WRITE, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for writing.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.io.DataOutputStream output,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(
        (java.io.OutputStream)output),
     IContainer.Type.WRITE, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for reading.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.io.DataInput input,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(input),
     IContainer.Type.READ, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for reading.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.io.DataInputStream input,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(
        (java.io.InputStream)input),
     IContainer.Type.READ, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }
  
  /**
   * Open this container and make it ready for reading or writing.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.io.RandomAccessFile file,
    IContainer.Type type,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(file),
     type, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for writing.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.nio.channels.WritableByteChannel output,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(output),
     IContainer.Type.WRITE, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for reading.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.nio.channels.ReadableByteChannel input,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(input),
     IContainer.Type.READ, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Open this container and make it ready for reading or writing.
   * @see #open(String, IContainer.Type, IContainerFormat, boolean, boolean) 
   */  
  public int open(
    java.nio.channels.ByteChannel channel,
    IContainer.Type type,
    IContainerFormat format,
    boolean streamsCanBeAddedDynamically,
    boolean queryStreamMetaData)
  {
    return open(com.xuggle.xuggler.io.XugglerIO.map(channel),
     type, format, streamsCanBeAddedDynamically, queryStreamMetaData); 
  }

  /**
   * Gets the SDP data as a Java string.
   * <p>
   * This method only supports SDP files up to 4K in size.
   * If you have a larger SDP file, use the
   * {@link #createSDPData(com.xuggle.ferry.IBuffer)} method and pass in your
   * own {@link com.xuggle.ferry.IBuffer} object.
   * </p> 
   * @return A {@link String} representing the data.
   * @see #createSDPData(IBuffer)
   */
  public String createSDPData()
  {
    IBuffer buffer = IBuffer.make(null, 4096);
    int len = this.createSDPData(buffer);
    if (len > 1)
    {
      byte [] stringBuf = new byte[len-1];
      buffer.get(0, stringBuf, 0, stringBuf.length);
      return new String(stringBuf);
    }
    return null;
  }
  /**
   * {@inheritDoc}
   */
  public java.util.Collection<String> getPropertyNames()
  {
    java.util.Collection<String> retval = new java.util.LinkedList<String>();
    int numProperties = this.getNumProperties();
    for(int i = 0; i < numProperties; i++)
    {
      IProperty property = this.getPropertyMetaData(i);
      String name = property.getName();
      retval.add(name);
    }
    return retval;
  }

  

  /**
   * Set the buffer length Xuggler will suggest to FFMPEG for reading inputs.<br>
   * <br>
   * If called when a IContainer is open, the call is ignored and -1 is returned.<br>
   * <br>
   * @param size The suggested buffer size.<br>
   * @return size on success; &lt;0 on error.
   */
  public int setInputBufferLength(long size) {
    return XugglerJNI.IContainer_setInputBufferLength(swigCPtr, this, size);
  }

  /**
   * Return the input buffer length.<br>
   * <br>
   * @return The input buffer length Xuggler's told FFMPEG to assume.<br>
   *   0 means FFMPEG should choose it's own<br>
   *   size (and it'll probably be 32768).
   */
  public long getInputBufferLength() {
    return XugglerJNI.IContainer_getInputBufferLength(swigCPtr, this);
  }

  /**
   * Is this container opened?<br>
   * @return true if opened; false if not.
   */
  public boolean isOpened() {
    return XugglerJNI.IContainer_isOpened(swigCPtr, this);
  }

  /**
   * Has a header been successfully written?<br>
   * @return true if yes, false if no.
   */
  public boolean isHeaderWritten() {
    return XugglerJNI.IContainer_isHeaderWritten(swigCPtr, this);
  }

  /**
   * Open this container and make it ready for reading or writing.<br>
   * <p><br>
   * The caller must call {#close()} when done, but if not, the<br>
   * {IContainer} will eventually close<br>
   * them later but warn to the logging system.<br>
   * </p><br>
   * <p><br>
   * This just forwards to {#open(String, Type, IContainerFormat, boolean, boolean)}<br>
   * passing false for aStreamsCanBeAddedDynamically, and true for aLookForAllStreams.<br>
   * </p><p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <br>
   * @param url The resource to open; The format of this string is any<br>
   *   url that FFMPEG supports (including additional protocols if added<br>
   *   through the xuggler.io library).<br>
   * @param type The type of this container.<br>
   * @param pContainerFormat A pointer to a ContainerFormat object specifying<br>
   *   the format of this container, or 0 (NULL) if you want us to guess.<br>
   * <br>
   * @return &gt;= 0 on success; &lt; 0 on error.
   */
  public int open(String url, IContainer.Type type, IContainerFormat pContainerFormat) {
    return XugglerJNI.IContainer_open__SWIG_0(swigCPtr, this, url, type.swigValue(), IContainerFormat.getCPtr(pContainerFormat), pContainerFormat);
  }

  /**
   * Open this container and make it ready for reading or writing, optionally<br>
   * reading as far into the container as necessary to find all streams.<br>
   * <p>The caller must call {#close()} when done, but if not, the<br>
   * {IContainer} will eventually close<br>
   * them later but warn to the logging system.<br>
   * </p><p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <br>
   * @param url The resource to open; The format of this string is any<br>
   *   url that FFMPEG supports (including additional protocols if added<br>
   *   through the xuggler.io library).<br>
   * @param type The type of this container.<br>
   * @param pContainerFormat A pointer to a ContainerFormat object specifying<br>
   *   the format of this container, or 0 (NULL) if you want us to guess.<br>
   * @param aStreamsCanBeAddedDynamically If true, open() will expect that new<br>
   *   streams can be added at any time, even after the format header has been read.<br>
   * @param aQueryStreamMetaData If true, open() will call {#queryStreamMetaData()}<br>
   *   on this container, which will potentially block until it has ready<br>
   *   enough data to find all streams in a container.  If false, it will only<br>
   *   block to read a minimal header for this container format.<br>
   * <br>
   * @return &gt;= 0 on success; &lt; 0 on error.
   */
  public int open(String url, IContainer.Type type, IContainerFormat pContainerFormat, boolean aStreamsCanBeAddedDynamically, boolean aQueryStreamMetaData) {
    return XugglerJNI.IContainer_open__SWIG_1(swigCPtr, this, url, type.swigValue(), IContainerFormat.getCPtr(pContainerFormat), pContainerFormat, aStreamsCanBeAddedDynamically, aQueryStreamMetaData);
  }

  /**
   * Gets the current level of standards compliance.<br>
   * @return The level of standards compliance.<br>
   * @see CodecStandardsCompliance<br>
   * @since 5.7
   */
  public IStreamCoder.CodecStandardsCompliance getStandardsCompliance() {
    return IStreamCoder.CodecStandardsCompliance.swigToEnum(XugglerJNI.IContainer_getStandardsCompliance(swigCPtr, this));
  }

  /**
   * Set the level of standards compliance.  Only paid attention to<br>
   * before the code is opened.<br>
   * <br>
   * @param compliance The desired compliance level to set<br>
   * @return 0 on success; non-zero on failure<br>
   * @see CodecStandardsCompliance<br>
   * @since 5.7
   */
  public int setStandardsCompliance(IStreamCoder.CodecStandardsCompliance compliance) {
    return XugglerJNI.IContainer_setStandardsCompliance(swigCPtr, this, compliance.swigValue());
  }

  /**
   * Returns the IContainerFormat object being used for this IContainer,<br>
   * or null if the {IContainer} doesn't yet know.<br>
   * <br>
   * @return the IContainerFormat object, or null.
   */
  public IContainerFormat getContainerFormat() {
    long cPtr = XugglerJNI.IContainer_getContainerFormat(swigCPtr, this);
    return (cPtr == 0) ? null : new IContainerFormat(cPtr, false);
  }

  /**
   * Close the container.  open() must have been called first, or<br>
   * else an error is returned.<p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <p><br>
   * If this method exits because of an interruption,<br>
   * all resources will be closed anyway.<br>
   * </p><br>
   * <br>
   * @return &gt;= 0 on success; &lt; 0 on error.
   */
  public int close() {
    return XugglerJNI.IContainer_close(swigCPtr, this);
  }

  /**
   * Find out the type of this container.<br>
   * <br>
   * @return The Type of this container.  <br>
   * {IContainer.Type#READ} if not yet opened.
   */
  public IContainer.Type getType() {
    return IContainer.Type.swigToEnum(XugglerJNI.IContainer_getType(swigCPtr, this));
  }

  /**
   * The number of streams in this container.<br>
   * <p>If opened in {IContainer.Type#READ} mode, this will query the stream and find out<br>
   * how many streams are in it.</p><p>If opened in<br>
   * {IContainer.Type#WRITE} mode, this will return the number of streams<br>
   * the caller has added to date.</p><p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p> <br>
   * <br>
   * @return The number of streams in this container.
   */
  public int getNumStreams() {
    return XugglerJNI.IContainer_getNumStreams(swigCPtr, this);
  }

  /**
   * Get the stream at the given position.<br>
   * <br>
   * @param streamIndex the index of this stream in the container<br>
   * @return The stream at that position in the container, or null if none there.
   */
  public IStream getStream(long streamIndex) {
    long cPtr = XugglerJNI.IContainer_getStream(swigCPtr, this, streamIndex);
    return (cPtr == 0) ? null : new IStream(cPtr, false);
  }

  /**
   * @deprecated Use {#addNewStream(ICodec.ID)} instead.<br>
   * <br>
   * Creates a new stream in this container and returns it.<br>
   * <br>
   * @param id A format-dependent id for this stream.<br>
   * <br>
   * @return A new stream.
   */
  @Deprecated public IStream addNewStream(int id) {
    long cPtr = XugglerJNI.IContainer_addNewStream__SWIG_0(swigCPtr, this, id);
    return (cPtr == 0) ? null : new IStream(cPtr, false);
  }

  /**
   * Adds a header, if needed, for this container.<br>
   * <p><br>
   * Call this AFTER you've added all streams you want to add,<br>
   * opened all IStreamCoders for those streams (with proper<br>
   * configuration) and<br>
   * before you write the first frame.  If you attempt to write<br>
   * a header but haven't opened all codecs, this method will log<br>
   * a warning, and your output file will likely be corrupt.<br>
   * </p><p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <br>
   * @return 0 if successful.  &lt; 0 if not.  Always -1 if this is<br>
   *           a READ container.
   */
  public int writeHeader() {
    return XugglerJNI.IContainer_writeHeader(swigCPtr, this);
  }

  /**
   * Adds a trailer, if needed, for this container.<br>
   * <br>
   * Call this AFTER you've written all data you're going to write<br>
   * to this container but BEFORE you call<br>
   * {IStreamCoder#close()} on your {IStreamCoder}<br>
   * objects.<br>
   * <p><br>
   * You must call {#writeHeader()} before you call<br>
   * this (and if you don't, the {IContainer}<br>
   * will warn loudly and not<br>
   * actually write the trailer).<br>
   * </p><br>
   * <p><br>
   * If you have closed any of the {IStreamCoder} objects<br>
   * that were open when you called<br>
   * {#writeHeader()}, then this method will fail.<br>
   * </p><p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <br>
   * @return 0 if successful.  &lt; 0 if not.  Always &lt;0 if this is<br>
   *           a READ container.
   */
  public int writeTrailer() {
    return XugglerJNI.IContainer_writeTrailer(swigCPtr, this);
  }

  /**
   * Reads the next packet into the IPacket.  This method will<br>
   * release any buffers currently held by this packet and allocate<br>
   * new ones.<br>
   * <p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <br>
   * @param packet [In/Out] The packet the IContainer will read into.<br>
   * <br>
   * @return 0 if successful, or &lt;0 if not.
   */
  public int readNextPacket(IPacket packet) {
    return XugglerJNI.IContainer_readNextPacket(swigCPtr, this, IPacket.getCPtr(packet), packet);
  }

  /**
   * Writes the contents of the packet to the container.<br>
   * <p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <br>
   * @param packet [In] The packet to write out.<br>
   * @param forceInterleave [In] If true, then this {IContainer} will<br>
   *   make sure all packets<br>
   *   are interleaved by DTS (even across streams in a container). <br>
   *   If false, the {IContainer} won't,<br>
   *   and it's up to the caller to interleave if necessary.<br>
   * <br>
   * @return # of bytes written if successful, or &lt;0 if not.
   */
  public int writePacket(IPacket packet, boolean forceInterleave) {
    return XugglerJNI.IContainer_writePacket__SWIG_0(swigCPtr, this, IPacket.getCPtr(packet), packet, forceInterleave);
  }

  /**
   * Writes the contents of the packet to the container, but make sure the<br>
   * packets are interleaved.<br>
   * <p><br>
   * This means the {IContainer} may have to queue up packets from one<br>
   * stream while waiting for packets from another.<br>
   * </p><p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * @param packet [In] The packet to write out.<br>
   * <br>
   * @return # of bytes written if successful, or &lt;0 if not.
   */
  public int writePacket(IPacket packet) {
    return XugglerJNI.IContainer_writePacket__SWIG_1(swigCPtr, this, IPacket.getCPtr(packet), packet);
  }

  /**
   * Create a new container object.<br>
   * <br>
   * @return a new container, or null on error.
   */
  public static IContainer make() {
    long cPtr = XugglerJNI.IContainer_make__SWIG_0();
    return (cPtr == 0) ? null : new IContainer(cPtr, false);
  }

  /**
   * Attempts to read all the meta data in this stream, potentially by reading ahead<br>
   * and decoding packets.<br>
   * <p><br>
   * Any packets this method reads ahead will be cached and correctly returned when you<br>
   * read packets, but this method can be non-blocking potentially until end of container<br>
   * to get all meta data.  Take care when you call it.<br>
   * </p><p>After this method is called, other meta data methods like {#getDuration()} should<br>
   * work.</p> <p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <br>
   * @return &gt;= 0 on success; &lt;0 on failure.
   */
  public int queryStreamMetaData() {
    return XugglerJNI.IContainer_queryStreamMetaData(swigCPtr, this);
  }

  /**
   * Seeks to the key frame at (or the first one after) the given timestamp.  This method will<br>
   * always fail for any IContainer that is not seekable (e.g. is streamed).  When successful<br>
   * the next call to {#readNextPacket(IPacket)} will get the next keyframe from the<br>
   * sought for stream.<p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <p><br>
   * <strong>WARNING:</strong>: This method will be deprecated<br>
   * in a future Xuggler release and replaced with the new<br>
   * API {#seekKeyFrame(int, long, long, long, int)}.<br>
   * </p><br>
   * <br>
   * @param streamIndex The stream to search for the keyframe in; must be a<br>
   *   stream the IContainer has either queried<br>
   *   meta-data about or already ready a packet for.<br>
   * @param timestamp The timestamp, in the timebase of the stream you're looking in (not necessarily Microseconds).<br>
   * @param flags Flags to pass to com.xuggle.xuggler.io.IURLProtocolHandler's seek method.<br>
   * <br>
   * @return &gt;= 0 on success; &lt;0 on failure.
   */
  public int seekKeyFrame(int streamIndex, long timestamp, int flags) {
    return XugglerJNI.IContainer_seekKeyFrame__SWIG_0(swigCPtr, this, streamIndex, timestamp, flags);
  }

  /**
   * Gets the duration, if known, of this container.<br>
   * <br>
   * This will only work for non-streamable containers where IContainer <br>
   * can calculate the container size.<br>
   * <br>
   * @return The duration, or {Global#NO_PTS} if not known.
   */
  public long getDuration() {
    return XugglerJNI.IContainer_getDuration(swigCPtr, this);
  }

  /**
   * Get the starting timestamp in microseconds of the first packet of the earliest stream in this container.<br>
   * <p><br>
   * This will only return value values either either (a) for non-streamable<br>
   * containers where IContainer can calculate the container size or<br>
   * (b) after IContainer has actually read the<br>
   * first packet from a streamable source.<br>
   * </p><br>
   * <br>
   * @return The starting timestamp in microseconds, or {Global#NO_PTS} if not known.
   */
  public long getStartTime() {
    return XugglerJNI.IContainer_getStartTime(swigCPtr, this);
  }

  /**
   * Get the file size in bytes of this container.<br>
   * <br>
   * This will only return a valid value if the container is non-streamed and supports seek.<br>
   * <br>
   * @return The file size in bytes, or &lt;0 on error.
   */
  public long getFileSize() {
    return XugglerJNI.IContainer_getFileSize(swigCPtr, this);
  }

  /**
   * Get the calculated overall bit rate of this file.<br>
   * <p><br>
   * This will only return a valid value if the container is non-streamed and supports seek.<br>
   * </p><br>
   * @return The overall bit rate in bytes per second, or &lt;0 on error.
   */
  public int getBitRate() {
    return XugglerJNI.IContainer_getBitRate(swigCPtr, this);
  }

  /**
   * Returns the total number of settable properties on this object<br>
   * <br>
   * @return total number of options (not including constant definitions)
   */
  public int getNumProperties() {
    return XugglerJNI.IContainer_getNumProperties(swigCPtr, this);
  }

  /**
   * Returns the name of the numbered property.<br>
   * <br>
   * @param propertyNo The property number in the options list.<br>
   * <br>
   * @return an IProperty value for this properties meta-data
   */
  public IProperty getPropertyMetaData(int propertyNo) {
    long cPtr = XugglerJNI.IContainer_getPropertyMetaData__SWIG_0(swigCPtr, this, propertyNo);
    return (cPtr == 0) ? null : new IProperty(cPtr, false);
  }

  /**
   * Returns the name of the numbered property.<br>
   * <br>
   * @param name  The property name.<br>
   * <br>
   * @return an IProperty value for this properties meta-data
   */
  public IProperty getPropertyMetaData(String name) {
    long cPtr = XugglerJNI.IContainer_getPropertyMetaData__SWIG_1(swigCPtr, this, name);
    return (cPtr == 0) ? null : new IProperty(cPtr, false);
  }

  /**
   * Sets a property on this Object.<br>
   * <br>
   * All AVOptions supported by the underlying AVClass are supported.<br>
   * <br>
   * @param name The property name.  For example "b" for bit-rate.<br>
   * @param value The value of the property. <br>
   * <br>
   * @return &gt;= 0 if the property was successfully set; &lt;0 on error
   */
  public int setProperty(String name, String value) {
    return XugglerJNI.IContainer_setProperty__SWIG_0(swigCPtr, this, name, value);
  }

  /**
   * Looks up the property 'name' and sets the<br>
   * value of the property to 'value'.<br>
   * <br>
   * @param name name of option<br>
   * @param value Value of option<br>
   * <br>
   * @return &gt;= 0 on success; &lt;0 on error.
   */
  public int setProperty(String name, double value) {
    return XugglerJNI.IContainer_setProperty__SWIG_1(swigCPtr, this, name, value);
  }

  /**
   * Looks up the property 'name' and sets the<br>
   * value of the property to 'value'.<br>
   * <br>
   * @param name name of option<br>
   * @param value Value of option<br>
   * <br>
   * @return &gt;= 0 on success; &lt;0 on error.
   */
  public int setProperty(String name, long value) {
    return XugglerJNI.IContainer_setProperty__SWIG_2(swigCPtr, this, name, value);
  }

  /**
   * Looks up the property 'name' and sets the<br>
   * value of the property to 'value'.<br>
   * <br>
   * @param name name of option<br>
   * @param value Value of option<br>
   * <br>
   * @return &gt;= 0 on success; &lt;0 on error.
   */
  public int setProperty(String name, boolean value) {
    return XugglerJNI.IContainer_setProperty__SWIG_3(swigCPtr, this, name, value);
  }

  /**
   * Looks up the property 'name' and sets the<br>
   * value of the property to 'value'.<br>
   * <br>
   * @param name name of option<br>
   * @param value Value of option<br>
   * <br>
   * @return &gt;= 0 on success; &lt;0 on error.
   */
  public int setProperty(String name, IRational value) {
    return XugglerJNI.IContainer_setProperty__SWIG_4(swigCPtr, this, name, IRational.getCPtr(value), value);
  }

  /**
   * Gets a property on this Object.<br>
   * <br>
   * <p><br>
   * Note for C++ callers; you must free the returned array with<br>
   * delete[] in order to avoid a memory leak.  If you call<br>
   * from Java or any other language, you don't need to worry<br>
   * about this.<br>
   * </p><br>
   * <br>
   * @param name property name<br>
   * <br>
   * @return an string copy of the option value, or null if the option doesn't exist.
   */
  public String getPropertyAsString(String name) {
    return XugglerJNI.IContainer_getPropertyAsString(swigCPtr, this, name);
  }

  /**
   * Gets the value of this property, and returns as a double;<br>
   * <br>
   * @param name name of option<br>
   * <br>
   * @return double value of property, or 0 on error.
   */
  public double getPropertyAsDouble(String name) {
    return XugglerJNI.IContainer_getPropertyAsDouble(swigCPtr, this, name);
  }

  /**
   * Gets the value of this property, and returns as an long;<br>
   * <br>
   * @param name name of option<br>
   * <br>
   * @return long value of property, or 0 on error.
   */
  public long getPropertyAsLong(String name) {
    return XugglerJNI.IContainer_getPropertyAsLong(swigCPtr, this, name);
  }

  /**
   * Gets the value of this property, and returns as an IRational;<br>
   * <br>
   * @param name name of option<br>
   * <br>
   * @return long value of property, or 0 on error.
   */
  public IRational getPropertyAsRational(String name) {
    long cPtr = XugglerJNI.IContainer_getPropertyAsRational(swigCPtr, this, name);
    return (cPtr == 0) ? null : new IRational(cPtr, false);
  }

  /**
   * Gets the value of this property, and returns as a boolean<br>
   * <br>
   * @param name name of option<br>
   * <br>
   * @return boolean value of property, or false on error.
   */
  public boolean getPropertyAsBoolean(String name) {
    return XugglerJNI.IContainer_getPropertyAsBoolean(swigCPtr, this, name);
  }

  /**
   * Get the flags associated with this object.<br>
   * <br>
   * @return The (compacted) value of all flags set.
   */
  public int getFlags() {
    return XugglerJNI.IContainer_getFlags(swigCPtr, this);
  }

  /**
   * Set the flags to use with this object.  All values<br>
   * must be ORed (|) together.<br>
   * <br>
   * @see Flags<br>
   * <br>
   * @param newFlags The new set flags for this codec.
   */
  public void setFlags(int newFlags) {
    XugglerJNI.IContainer_setFlags(swigCPtr, this, newFlags);
  }

  /**
   * Get the setting for the specified flag<br>
   * <br>
   * @param flag The flag you want to find the setting for<br>
   * <br>
   * @return 0 for false; non-zero for true
   */
  public boolean getFlag(IContainer.Flags flag) {
    return XugglerJNI.IContainer_getFlag(swigCPtr, this, flag.swigValue());
  }

  /**
   * Set the flag.<br>
   * <br>
   * @param flag The flag to set<br>
   * @param value The value to set it to (true or false)
   */
  public void setFlag(IContainer.Flags flag, boolean value) {
    XugglerJNI.IContainer_setFlag(swigCPtr, this, flag.swigValue(), value);
  }

  /**
   * Get the URL the IContainer was opened with.<br>
   * May return null if unknown.<br>
   * @return the URL opened, or null.
   */
  public String getURL() {
    return XugglerJNI.IContainer_getURL(swigCPtr, this);
  }

  /**
   * Flush all packets to output.<br>
   * <p><br>
   * Will only work on {IContainer.Type#WRITE} containers.<br>
   * </p><p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.  <br>
   * </p><br>
   * <br>
   * @return &gt;= 0 on success; &lt;0 on error
   */
  public int flushPackets() {
    return XugglerJNI.IContainer_flushPackets(swigCPtr, this);
  }

  /**
   * Get the number of times {IContainer#readNextPacket(IPacket)}<br>
   * will retry a read if it gets a {IError.Type#ERROR_AGAIN}<br>
   * value back.<br>
   * <br>
   * Defaults to 1 times.  &lt;0 means it will keep retrying indefinitely.<br>
   * <br>
   * @return the read retry count
   */
  public int getReadRetryCount() {
    return XugglerJNI.IContainer_getReadRetryCount(swigCPtr, this);
  }

  /**
   * Sets the read retry count.<br>
   * <br>
   * @see #getReadRetryCount()<br>
   * <br>
   * @param count The read retry count.  &lt;0 means keep trying.
   */
  public void setReadRetryCount(int count) {
    XugglerJNI.IContainer_setReadRetryCount(swigCPtr, this, count);
  }

  /**
   * Can streams be added dynamically to this container?<br>
   * <br>
   * @return true if streams can be added dynamically
   */
  public boolean canStreamsBeAddedDynamically() {
    return XugglerJNI.IContainer_canStreamsBeAddedDynamically(swigCPtr, this);
  }

  /**
   * Get the {IMetaData} for this object,<br>
   * or null if none.<br>
   * <p><br>
   * If the {IContainer} or {IStream} object<br>
   * that this {IMetaData} came from was opened<br>
   * for reading, then changes via {IMetaData#setValue(String, String)}<br>
   * will have no effect on the underlying media.<br>
   * </p><br>
   * <p><br>
   * If the {IContainer} or {IStream} object<br>
   * that this {IMetaData} came from was opened<br>
   * for writing, then changes via {IMetaData#setValue(String, String)}<br>
   * will have no effect after {IContainer#writeHeader()}<br>
   * is called.<br>
   * </p><br>
   * @return the {IMetaData}.
   */
  public IMetaData getMetaData() {
    long cPtr = XugglerJNI.IContainer_getMetaData(swigCPtr, this);
    return (cPtr == 0) ? null : new IMetaData(cPtr, false);
  }

  /**
   * Set the {IMetaData} on this object, overriding<br>
   * any previous meta data.  You should call this<br>
   * method on writable containers and<br>
   * before you call {IContainer#writeHeader}, as<br>
   * it probably won't do anything after that.<br>
   * <br>
   * @see #getMetaData()
   */
  public void setMetaData(IMetaData data) {
    XugglerJNI.IContainer_setMetaData(swigCPtr, this, IMetaData.getCPtr(data), data);
  }

  /**
   * Fills the given buffer with a null-terminated ASCII<br>
   * set of bytes representing SDP data that<br>
   * is suitable for use with an RTSP-based system.<br>
   * <p><br>
   * This method only works if Xuggler is linking<br>
   * against a version of FFmpeg that supports RTSP.<br>
   * </p><br>
   * @param buffer the {com.xuggle.ferry.IBuffer}<br>
   * object to fill with data.<br>
   * @return the number of bytes written, including the<br>
   * terminating 0 byte, or &lt; 0 on error.
   */
  public int createSDPData(IBuffer buffer) {
    return XugglerJNI.IContainer_createSDPData(swigCPtr, this, IBuffer.getCPtr(buffer), buffer);
  }

  /**
   * Forces the {IContainer} to assume all audio streams are<br>
   * encoded with the given audio codec when demuxing.<br>
   * @param id The codec id<br>
   * @return &lt; 0 on error (e.g. not an audio codec); &gt;= 0 on success.<br>
   * @since 3.3
   */
  public int setForcedAudioCodec(ICodec.ID id) {
    return XugglerJNI.IContainer_setForcedAudioCodec(swigCPtr, this, id.swigValue());
  }

  /**
   * Forces the {IContainer} to assume all video streams are<br>
   * encoded with the given video codec when demuxing.<br>
   * @param id The codec id<br>
   * @return &lt; 0 on error (e.g. not an video codec); &gt;= 0 on success.<br>
   * @since 3.3
   */
  public int setForcedVideoCodec(ICodec.ID id) {
    return XugglerJNI.IContainer_setForcedVideoCodec(swigCPtr, this, id.swigValue());
  }

  /**
   * Forces the {IContainer} to assume all subtitle streams are<br>
   * encoded with the given subtitle codec when demuxing.<br>
   * @param id The codec id<br>
   * @return &lt; 0 on error (e.g. not an subtitle codec); &gt;= 0 on success.<br>
   * @since 3.3
   */
  public int setForcedSubtitleCodec(ICodec.ID id) {
    return XugglerJNI.IContainer_setForcedSubtitleCodec(swigCPtr, this, id.swigValue());
  }

  /**
   * EXPERIMENTAL - Seeks to timestamp in the container.<br>
   * <p><br>
   * Seeking will be done so that the point from which all active streams<br>
   * can be presented successfully will be closest to<br>
   * <code>targetTimeStamp</code> and within <code><br>
   * minTimeStamp/maxTimeStamp</code>.<br>
   * </p><br>
   * <p><br>
   * If flags contain {#SEEK_FLAG_BYTE}, then all time stamps are in bytes and<br>
   * are the file position (this may not be supported by all demuxers).<br>
   * If flags contain {#SEEK_FLAG_FRAME}, then all time stamps are in frames<br>
   * in the stream with <code>streamIndex</code> (this may not be supported by all demuxers).<br>
   * Otherwise all time stamps are in units of the stream selected by stream_index<br>
   * or if stream_index is -1, in microseconds.<br>
   * If flags contain {#SEEK_FLAG_ANY}, then non-keyframes are treated as<br>
   * keyframes (this may not be supported by all demuxers).<br>
   * If flags contain {#SEEK_FLAG_BACKWARDS}, then we will attempt to<br>
   * search backwards in the container (this may not be supported by all<br>
   * demuxers and file protocols).<br>
   * </p><br>
   * <p><br>
   * This is part of the new seek API which is still under construction.<br>
   *       It may change in future Xuggler versions.<br>
   * </p><br>
   * @param streamIndex index of the stream which is used as time base reference<br>
   * @param minTimeStamp smallest acceptable time stamp.<br>
   * @param targetTimeStamp target time stamp.<br>
   * @param maxTimeStamp largest acceptable time stamp.<br>
   * @param flags A bitmask of the <code>SEEK_FLAG_*</code> flags, or 0 to turn<br>
   *   all flags off.<br>
   * @return &gt;=0 on success, error code otherwise<br>
   * @since 3.4
   */
  public int seekKeyFrame(int streamIndex, long minTimeStamp, long targetTimeStamp, long maxTimeStamp, int flags) {
    return XugglerJNI.IContainer_seekKeyFrame__SWIG_1(swigCPtr, this, streamIndex, minTimeStamp, targetTimeStamp, maxTimeStamp, flags);
  }

  /**
   * @deprecated use {#setProperty} instead.<br>
   * <br>
   * If the container has not already been opened, sets the AVFormatContext.preload property<br>
   * which can be useful in some circumstances such as when dealing with mpeg formats.<br>
   * <br>
   * @param preload amount to preload<br>
   * @return &gt;= 0 on success, error code otherwise<br>
   * @since 4.0
   */
  @Deprecated public int setPreload(int preload) {
    return XugglerJNI.IContainer_setPreload(swigCPtr, this, preload);
  }

  /**
   * @deprecated use {#getPropertyAsLong} instead.<br>
   * The amount container will attemtp to preload.<br>
   * <br>
   * @return The amount to preload, error code otherwise.
   */
  @Deprecated public int getPreload() {
    return XugglerJNI.IContainer_getPreload(swigCPtr, this);
  }

  /**
   * Sets the max delay for the AVFormatContext.max_delay property.<br>
   * <br>
   * @param maxdelay maximum delay for container<br>
   * @return &gt;= 0 on success, error code otherwise<br>
   * @since 4.0
   */
  public int setMaxDelay(int maxdelay) {
    return XugglerJNI.IContainer_setMaxDelay(swigCPtr, this, maxdelay);
  }

  /**
   * Gets the AVFormatContext.max_delay property if possible.<br>
   * @return The max delay, error code otherwise.<br>
   * @since 4.0
   */
  public int getMaxDelay() {
    return XugglerJNI.IContainer_getMaxDelay(swigCPtr, this);
  }

  /**
   * Add a new stream that will use the given codec.<br>
   * <br>
   * @param id The id for the codec used to insert packets.  If you are adding an arbitrary data stream, use {ICodec.ID#AV_CODEC_ID_NONE}, otherwise<br>
   *   use the ID of the code type you plan to use.<br>
   * <br>
   * @return An {IStream} for the new stream on success, or null on failure.<br>
   * @since 5.0
   */
  public IStream addNewStream(ICodec.ID id) {
    long cPtr = XugglerJNI.IContainer_addNewStream__SWIG_1(swigCPtr, this, id.swigValue());
    return (cPtr == 0) ? null : new IStream(cPtr, false);
  }

  /**
   * Add a new stream that will use the given codec.<br>
   * <br>
   * @param codec The codec that will be used to insert packets.<br>
   * <br>
   * @return An {IStream} for the new stream on success, or null on failure.<br>
   * @since 5.0
   */
  public IStream addNewStream(ICodec codec) {
    long cPtr = XugglerJNI.IContainer_addNewStream__SWIG_2(swigCPtr, this, ICodec.getCPtr(codec), codec);
    return (cPtr == 0) ? null : new IStream(cPtr, false);
  }

  /**
   * Add a new stream that will use the given StreamCoder.  The StreamCoder passed in MUST contain the {IStreamCoder#getExtraData} that<br>
   * was used to encode the packet.<br>
   * <br>
   * @param coder The {IStreamCoder} that contains the meta-information needed for decoding the packets that will be muexed into this stream.<br>
   * @return An {IStream} for the new stream on success, or null on failure.<br>
   * @since 5.0
   */
  public IStream addNewStream(IStreamCoder coder) {
    long cPtr = XugglerJNI.IContainer_addNewStream__SWIG_3(swigCPtr, this, IStreamCoder.getCPtr(coder), coder);
    return (cPtr == 0) ? null : new IStream(cPtr, false);
  }

  /**
   * {
   */
  public int setProperty(IMetaData valuesToSet, IMetaData valuesNotFound) {
    return XugglerJNI.IContainer_setProperty__SWIG_5(swigCPtr, this, IMetaData.getCPtr(valuesToSet), valuesToSet, IMetaData.getCPtr(valuesNotFound), valuesNotFound);
  }

  /**
   * Get the {IContainerFormat} that is used by this {IContainer}.<br>
   * <br>
   * @return The format, or null if none is set yet.<br>
   * @since 5.0
   */
  public IContainerFormat getFormat() {
    long cPtr = XugglerJNI.IContainer_getFormat(swigCPtr, this);
    return (cPtr == 0) ? null : new IContainerFormat(cPtr, false);
  }

  /**
   * Set the {IContainerFormat} to use with this {IContainer}.  If called when the<br>
   * {IContainer} is opened, or if previously called with a non-null value,<br>
   * an error is returned and no action is taken.<br>
   * @param format The format to use<br>
   * return 0 on success; &lt;0 on failure<br>
   * @since 5.0
   */
  public int setFormat(IContainerFormat format) {
    return XugglerJNI.IContainer_setFormat(swigCPtr, this, IContainerFormat.getCPtr(format), format);
  }

  /**
   * Create a new {IContainer} and call {#setFormat(IContainerFormat)} on it immediately.<br>
   * @param format The format to pass to {#setFormat(IContainerFormat)}<br>
   * @return An {IContainer} on success, or null on failure.<br>
   * @since 5.0
   */
  public static IContainer make(IContainerFormat format) {
    long cPtr = XugglerJNI.IContainer_make__SWIG_1(IContainerFormat.getCPtr(format), format);
    return (cPtr == 0) ? null : new IContainer(cPtr, false);
  }

  /**
   * Open this container and make it ready for reading or writing, optionally<br>
   * reading as far into the container as necessary to find all streams.<br>
   * <p>The caller must call {#close()} when done, but if not, the<br>
   * {IContainer} will eventually close<br>
   * them later but warn to the logging system.<br>
   * </p><p>If the current thread is interrupted while this blocking method<br>
   * is running the method will return with a negative value.<br>
   * To check if the method exited because of an interruption<br>
   * pass the return value to {IError#make(int)} and then<br>
   * check {IError#getType()} to see if it is<br>
   * {IError.Type#ERROR_INTERRUPTED}.<br>
   * </p><br>
   * <br>
   * @param url The resource to open; The format of this string is any<br>
   *   url that FFMPEG supports (including additional protocols if added<br>
   *   through the xuggler.io library).<br>
   * @param type The type of this container.<br>
   * @param containerFormat A pointer to a ContainerFormat object specifying<br>
   *   the format of this container, or 0 (NULL) if you want us to guess.<br>
   * @param streamsCanBeAddedDynamically If true, open() will expect that new<br>
   *   streams can be added at any time, even after the format header has been read.<br>
   * @param queryStreamMetaData If true, open() will call {#queryStreamMetaData()}<br>
   *   on this container, which will potentially block until it has ready<br>
   *   enough data to find all streams in a container.  If false, it will only<br>
   *   block to read a minimal header for this container format.<br>
   * @param options If not null, a set of key-value pairs that will be set on the container immediately<br>
   *   the format is determined.  Some options cannot be set (especially for input containers) until the<br>
   *   system has a chance to parse what data is in the file.<br>
   * @param optionsNotSet If not null, on return this {IMetaData} object will be cleared out, and<br>
   *   replace with any key/value pairs that were in <code>options</code> but could not be set on this<br>
   *   {IContainer}.<br>
   * <br>
   * @return &gt;= 0 on success; &lt; 0 on error.<br>
   * @since 5.0
   */
  public int open(String url, IContainer.Type type, IContainerFormat containerFormat, boolean streamsCanBeAddedDynamically, boolean queryStreamMetaData, IMetaData options, IMetaData optionsNotSet) {
    return XugglerJNI.IContainer_open__SWIG_2(swigCPtr, this, url, type.swigValue(), IContainerFormat.getCPtr(containerFormat), containerFormat, streamsCanBeAddedDynamically, queryStreamMetaData, IMetaData.getCPtr(options), options, IMetaData.getCPtr(optionsNotSet), optionsNotSet);
  }

  /**
   * The different types of Containers Xuggler supports.  A container<br>
   * may only be opened in a uni-directional mode.
   */
  public enum Type {
    READ,
    WRITE;

    public final int swigValue() {
      return swigValue;
    }

    public static Type swigToEnum(int swigValue) {
      Type[] swigValues = Type.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Type swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Type.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Type() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Type(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Type(Type swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  public enum Flags {
    FLAG_GENPTS(XugglerJNI.IContainer_FLAG_GENPTS_get()),
    FLAG_IGNIDX(XugglerJNI.IContainer_FLAG_IGNIDX_get()),
    FLAG_NONBLOCK(XugglerJNI.IContainer_FLAG_NONBLOCK_get()),
    FLAG_IGNDTS(XugglerJNI.IContainer_FLAG_IGNDTS_get()),
    FLAG_NOFILLIN(XugglerJNI.IContainer_FLAG_NOFILLIN_get()),
    FLAG_NOPARSE(XugglerJNI.IContainer_FLAG_NOPARSE_get()),
    FLAG_NOBUFFER(XugglerJNI.IContainer_FLAG_NOBUFFER_get()),
    FLAG_CUSTOM_IO(XugglerJNI.IContainer_FLAG_CUSTOM_IO_get()),
    FLAG_DISCARD_CORRUPT(XugglerJNI.IContainer_FLAG_DISCARD_CORRUPT_get()),
    FLAG_FLUSH_PACKETS(XugglerJNI.IContainer_FLAG_FLUSH_PACKETS_get()),
    FLAG_BITEXACT(XugglerJNI.IContainer_FLAG_BITEXACT_get()),
    FLAG_MP4A_LATM(XugglerJNI.IContainer_FLAG_MP4A_LATM_get()),
    FLAG_SORT_DTS(XugglerJNI.IContainer_FLAG_SORT_DTS_get()),
    FLAG_PRIV_OPT(XugglerJNI.IContainer_FLAG_PRIV_OPT_get()),
    FLAG_KEEP_SIDE_DATA(XugglerJNI.IContainer_FLAG_KEEP_SIDE_DATA_get()),
    FLAG_FAST_SEEK(XugglerJNI.IContainer_FLAG_FAST_SEEK_get());

    public final int swigValue() {
      return swigValue;
    }

    public static Flags swigToEnum(int swigValue) {
      Flags[] swigValues = Flags.class.getEnumConstants();
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (Flags swigEnum : swigValues)
        if (swigEnum.swigValue == swigValue)
          return swigEnum;
      throw new IllegalArgumentException("No enum " + Flags.class + " with value " + swigValue);
    }

    @SuppressWarnings("unused")
    private Flags() {
      this.swigValue = SwigNext.next++;
    }

    @SuppressWarnings("unused")
    private Flags(int swigValue) {
      this.swigValue = swigValue;
      SwigNext.next = swigValue+1;
    }

    @SuppressWarnings("unused")
    private Flags(Flags swigEnum) {
      this.swigValue = swigEnum.swigValue;
      SwigNext.next = this.swigValue+1;
    }

    private final int swigValue;

    private static class SwigNext {
      private static int next = 0;
    }
  }

  /**
   *  Flag; Seek backwards 
   */
  public final static int SEEK_FLAG_BACKWARDS = XugglerJNI.IContainer_SEEK_FLAG_BACKWARDS_get();
  /**
   *  Flag; Use bytes instead of time stamps for seeking 
   */
  public final static int SEEK_FLAG_BYTE = XugglerJNI.IContainer_SEEK_FLAG_BYTE_get();
  /**
   *  Flag; Seek to any frame, even non-keyframes 
   */
  public final static int SEEK_FLAG_ANY = XugglerJNI.IContainer_SEEK_FLAG_ANY_get();
  /**
   *  Flag; Seek based on frame number instead of time stamps 
   */
  public final static int SEEK_FLAG_FRAME = XugglerJNI.IContainer_SEEK_FLAG_FRAME_get();
}
