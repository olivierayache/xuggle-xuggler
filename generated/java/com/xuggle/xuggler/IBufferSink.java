/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
public class IBufferSink extends IMediaFilter {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected IBufferSink(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.IBufferSink_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected IBufferSink(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(XugglerJNI.IBufferSink_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IBufferSink obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IBufferSink object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public IBufferSink copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new IBufferSink(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IBufferSink)
      equal = (((IBufferSink)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  
  /**
   * Returns the sample rate of output filtered samples.<br>
   * <br>
   * @return the sample rate
   */
  public int getSampleRate() {
    return XugglerJNI.IBufferSink_getSampleRate(swigCPtr, this);
  }

  /**
   * Returns the channel number of output filtered samples.<br>
   * <br>
   * @return the channel number
   */
  public int getChannels() {
    return XugglerJNI.IBufferSink_getChannels(swigCPtr, this);
  }

  /**
   * Sets the number of samples for each output filtered samples.<br>
   * The last buffer will be padded with 0.<br>
   * <br>
   * @param frameSize the number of samples of output
   */
  public void setNumSamples(int frameSize) {
    XugglerJNI.IBufferSink_setNumSamples(swigCPtr, this, frameSize);
  }

  /**
   * Fills this audio samples with filtered data <br>
   * <br>
   * @param samples the audio samples filled with filtered data<br>
   * <br>
   * @return 0 on success or &lt;0 if an error occurs
   */
  public int fillAudioSamples(IAudioSamples samples) {
    return XugglerJNI.IBufferSink_fillAudioSamples(swigCPtr, this, IAudioSamples.getCPtr(samples), samples);
  }

}
