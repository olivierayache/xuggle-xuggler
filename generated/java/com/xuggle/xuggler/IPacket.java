/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.xuggle.xuggler;
import com.xuggle.ferry.*;
/**
 * Represents an encoded piece of data that can be placed in an {IContainer}<br>
 * for a given {IStream} of data.<br>
 * <p><br>
 * You read this object out of {IContainer} objects when decoding, and<br>
 * pass to an {IStreamCoder} object to decode.<br>
 * </p><p><br>
 * You pass this object to a {IStreamCoder} to encode data, and then<br>
 * pass to an {IContainer} object to write to a data source.<br>
 * </p><p><br>
 * Lastly, the units of timestamps in an {IPacket} are determined by the<br>
 * {IContainer} it came from (or is going to).  For example, FLV {IPacket}s<br>
 * are always in milliseconds (1/1000 of a second).  You cannot assume these<br>
 * timestamps are in any given timeunit without getting an {IStream} object<br>
 * and finding out what Time Base that stream operates in.<br>
 * </p><p><br>
 * For convenience, the Xuggler API always uses Microseconds for raw data<br>
 * ({IVideoPicture} and {IAudioSamples} objects), and will convert to<br>
 * the right time stamp unit when decoding or encoding data (with an {IStreamCoder})<br>
 * from or to an {IContainer}. 
 */
public class IPacket extends IMediaData {
  // JNIHelper.swg: Start generated code
  // >>>>>>>>>>>>>>>>>>>>>>>>>>>
  /**
   * This method is only here to use some references and remove
   * a Eclipse compiler warning.
   */
  @SuppressWarnings("unused")
  private void noop()
  {
    IBuffer.make(null, 1);
  }
   
  private volatile long swigCPtr;

  /**
   * Internal Only.
   */
  protected IPacket(long cPtr, boolean cMemoryOwn) {
    super(XugglerJNI.IPacket_SWIGUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }
  
  /**
   * Internal Only.
   */
  protected IPacket(long cPtr, boolean cMemoryOwn,
      java.util.concurrent.atomic.AtomicLong ref)
  {
    super(XugglerJNI.IPacket_SWIGUpcast(cPtr),
     cMemoryOwn, ref);
    swigCPtr = cPtr;
  }
    
  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that obj is proxying for.
   *   
   * @param obj The java proxy object for a native object.
   * @return The raw pointer obj is proxying for.
   */
  public static long getCPtr(IPacket obj) {
    if (obj == null) return 0;
    return obj.getMyCPtr();
  }

  /**
   * Internal Only.  Not part of public API.
   *
   * Get the raw value of the native object that we're proxying for.
   *   
   * @return The raw pointer we're proxying for.
   */  
  public long getMyCPtr() {
    if (swigCPtr == 0) throw new IllegalStateException("underlying native object already deleted");
    return swigCPtr;
  }
  
  /**
   * Create a new IPacket object that is actually referring to the
   * exact same underlying native object.
   *
   * @return the new Java object.
   */
  @Override
  public IPacket copyReference() {
    if (swigCPtr == 0)
      return null;
    else
      return new IPacket(swigCPtr, swigCMemOwn, getJavaRefCount());
  }

  /**
   * Compares two values, returning true if the underlying objects in native code are the same object.
   *
   * That means you can have two different Java objects, but when you do a comparison, you'll find out
   * they are the EXACT same object.
   *
   * @return True if the underlying native object is the same.  False otherwise.
   */
  public boolean equals(Object obj) {
    boolean equal = false;
    if (obj instanceof IPacket)
      equal = (((IPacket)obj).swigCPtr == this.swigCPtr);
    return equal;
  }
  
  /**
   * Get a hashable value for this object.
   *
   * @return the hashable value.
   */
  public int hashCode() {
     return (int)swigCPtr;
  }
  
  // <<<<<<<<<<<<<<<<<<<<<<<<<<<
  // JNIHelper.swg: End generated code
  

  /**
   * info about this packet
   * @return information about this packet
   */
   
  @Override
  public String toString()
  {
    StringBuilder result = new StringBuilder();
    
    result.append(this.getClass().getName()+"@"+hashCode()+"[");
    result.append("complete:"+isComplete()+";");
    result.append("dts:"+getDts()+";");
    result.append("pts:"+getPts()+";");
    result.append("size:"+getSize()+";");
    result.append("key:"+isKey()+";");
    result.append("flags:"+getFlags()+";");
    result.append("stream index:"+getStreamIndex()+";");
    result.append("duration:"+getDuration()+";");
    result.append("position:"+getPosition()+";");
    IRational timeBase = getTimeBase();
    result.append("time base:"+timeBase+";");
    if (timeBase != null) timeBase.delete();
    result.append("]");
    return result.toString();
  }


  /**
   * Clear out any data in this packet, but leaves<br>
   * the buffer available for reuse.
   */
  public void reset() {
    XugglerJNI.IPacket_reset(swigCPtr, this);
  }

  /**
   * Is this packet complete.<br>
   * @return Is this packet full and therefore has valid information.
   */
  public boolean isComplete() {
    return XugglerJNI.IPacket_isComplete(swigCPtr, this);
  }

  /**
   * Get the Presentation Time Stamp (PTS) for this packet.<br>
   * <br>
   * This is the time at which the payload for this packet should<br>
   * be <strong>presented</strong> to the user, in units of<br>
   * {#getTimeBase()}, relative to the start of stream.<br>
   * <br>
   * @return Get the Presentation Timestamp for this packet.
   */
  public long getPts() {
    return XugglerJNI.IPacket_getPts(swigCPtr, this);
  }

  /**
   * Set a new Presentation Time Stamp (PTS) for this packet.<br>
   * <br>
   * @param aPts a new PTS for this packet.<br>
   * <br>
   * @see #getPts()
   */
  public void setPts(long aPts) {
    XugglerJNI.IPacket_setPts(swigCPtr, this, aPts);
  }

  /**
   * Get the Decompression Time Stamp (DTS) for this packet.<br>
   * <p><br>
   * This is the time at which the payload for this packet should<br>
   * be <strong>decompressed</strong>, in units of<br>
   * {#getTimeBase()}, relative to the start of stream.<br>
   * </p><br>
   * <p><br>
   * Some media codecs can require packets from the &quot;future&quot; to<br>
   * be decompressed before earliest packets as an additional way to compress<br>
   * data.  In general you don't need to worry about this, but if you're<br>
   * curious start reading about the difference between I-Frames, P-Frames<br>
   * and B-Frames (or Bi-Directional Frames).  B-Frames can use information<br>
   * from future frames when compressed.<br>
   * </p><br>
   * @return Get the Decompression Timestamp (i.e. when this was read relative<br>
   * to the start of reading packets).
   */
  public long getDts() {
    return XugglerJNI.IPacket_getDts(swigCPtr, this);
  }

  /**
   * Set a new Decompression Time Stamp (DTS) for this packet.<br>
   * @param aDts a new DTS for this packet.<br>
   * @see #getDts()
   */
  public void setDts(long aDts) {
    XugglerJNI.IPacket_setDts(swigCPtr, this, aDts);
  }

  /**
   * Get the size in bytes of the payload currently in this packet.<br>
   * @return Size (in bytes) of payload currently in packet.
   */
  public int getSize() {
    return XugglerJNI.IPacket_getSize(swigCPtr, this);
  }

  /**
   * Get the maximum size (in bytes) of payload this packet can hold.<br>
   * @return Get maximum size (in bytes) of payload this packet can hold.
   */
  public int getMaxSize() {
    return XugglerJNI.IPacket_getMaxSize(swigCPtr, this);
  }

  /**
   * Get the container-specific index for the stream this packet is<br>
   * part of.<br>
   * @return Stream in container that this packet has data for.
   */
  public int getStreamIndex() {
    return XugglerJNI.IPacket_getStreamIndex(swigCPtr, this);
  }

  /**
   * Get any flags set on this packet, as a 4-byte binary-ORed bit-mask.<br>
   * This is access to raw FFMPEG<br>
   * flags, but it is easier to use the is* methods below.<br>
   * @return Any flags on the packet.
   */
  public int getFlags() {
    return XugglerJNI.IPacket_getFlags(swigCPtr, this);
  }

  /**
   * Does this packet contain Key data? i.e. data that needs no other<br>
   * frames or samples to decode.<br>
   * @return true if key; false otherwise.
   */
  public boolean isKeyPacket() {
    return XugglerJNI.IPacket_isKeyPacket(swigCPtr, this);
  }

  /**
   * Return the duration of this packet, in units of {#getTimeBase()}<br>
   * @return Duration of this packet, in same time-base as the PTS.
   */
  public long getDuration() {
    return XugglerJNI.IPacket_getDuration(swigCPtr, this);
  }

  /**
   * Return the position (in bytes) of this packet in the stream.<br>
   * @return The position of this packet in the stream, or -1 if<br>
   *   unknown.
   */
  public long getPosition() {
    return XugglerJNI.IPacket_getPosition(swigCPtr, this);
  }

  /**
   * Discard the current payload and allocate a new payload.<br>
   * <p><br>
   * Note that if any people have access to the old payload using<br>
   * getData(), the memory will continue to be available to them<br>
   * until they release their hold of the IBuffer.<br>
   * </p><br>
   * <p><br>
   * When requesting a packet size, the system<br>
   *   may allocate a larger payloadSize.<br>
   * </p><br>
   * @param payloadSize The (minimum) payloadSize of this packet in bytes.<br>
   * <br>
   * @return &gt;= 0 if successful.  &lt; 0 if error.
   */
  public int allocateNewPayload(int payloadSize) {
    return XugglerJNI.IPacket_allocateNewPayload(swigCPtr, this, payloadSize);
  }

  /**
   * Allocate a new packet.<br>
   * <p><br>
   * Note that any buffers this packet needs will be<br>
   * lazily allocated (i.e. we won't actually grab all<br>
   * the memory until we need it).<br>
   * </p><br>
   * <br>
   * @return a new packet, or null on error.
   */
  public static IPacket make() {
    long cPtr = XugglerJNI.IPacket_make__SWIG_0();
    return (cPtr == 0) ? null : new IPacket(cPtr, false);
  }

  /**
   * Allocate a new packet that wraps an existing IBuffer.<br>
   * <br>
   * @param buffer The IBuffer to wrap.<br>
   * @return a new packet or null on error.
   */
  public static IPacket make(IBuffer buffer) {
    long cPtr = XugglerJNI.IPacket_make__SWIG_1(IBuffer.getCPtr(buffer), buffer);
    return (cPtr == 0) ? null : new IPacket(cPtr, false);
  }

  /**
   * Set if this is a key packet.<br>
   * <br>
   * @param keyPacket true for yes, false for no.
   */
  public void setKeyPacket(boolean keyPacket) {
    XugglerJNI.IPacket_setKeyPacket(swigCPtr, this, keyPacket);
  }

  /**
   * Set any internal flags.<br>
   * <br>
   * @param flags Flags to set
   */
  public void setFlags(int flags) {
    XugglerJNI.IPacket_setFlags(swigCPtr, this, flags);
  }

  /**
   * Set if this packet is complete, and what the total size of the data should be assumed to be.<br>
   * <br>
   * @param complete True for complete, false for not.<br>
   * @param size Size of data in packet.
   */
  public void setComplete(boolean complete, int size) {
    XugglerJNI.IPacket_setComplete(swigCPtr, this, complete, size);
  }

  /**
   * Set the stream index for this packet.<br>
   * <br>
   * @param streamIndex The stream index, as determined from the {IContainer} this packet will be written to.
   */
  public void setStreamIndex(int streamIndex) {
    XugglerJNI.IPacket_setStreamIndex(swigCPtr, this, streamIndex);
  }

  /**
   * Set the duration.<br>
   * @param duration new duration<br>
   * @see #getDuration()
   */
  public void setDuration(long duration) {
    XugglerJNI.IPacket_setDuration(swigCPtr, this, duration);
  }

  /**
   * Set the position.<br>
   * @param position new position<br>
   * @see #getPosition()
   */
  public void setPosition(long position) {
    XugglerJNI.IPacket_setPosition(swigCPtr, this, position);
  }

  /**
   * Allocate a new packet wrapping the existing contents of<br>
   * a passed in packet.  Callers can then modify<br>
   * {#getPts()},<br>
   * {#getDts()} and other get/set methods without<br>
   * modifying the original packet.<br>
   * <br>
   * @param packet Packet to reuse buffer from and to<br>
   *   copy settings from.<br>
   * @param copyData if true copy data from packet<br>
   *   into our own buffer.  If false, share the same<br>
   *   data buffer that packet uses <br>
   * <br>
   * @return a new packet or null on error.
   */
  public static IPacket make(IPacket packet, boolean copyData) {
    long cPtr = XugglerJNI.IPacket_make__SWIG_2(IPacket.getCPtr(packet), packet, copyData);
    return (cPtr == 0) ? null : new IPacket(cPtr, false);
  }

  /**
   * Allocate a new packet.<br>
   * <p><br>
   * Note that any buffers this packet needs will be<br>
   * lazily allocated (i.e. we won't actually grab all<br>
   * the memory until we need it).<br>
   * </p><br>
   * @param size The maximum size, in bytes, of data you<br>
   *   want to put in this packet.<br>
   * <br>
   * @return a new packet, or null on error.
   */
  public static IPacket make(int size) {
    long cPtr = XugglerJNI.IPacket_make__SWIG_3(size);
    return (cPtr == 0) ? null : new IPacket(cPtr, false);
  }

}
